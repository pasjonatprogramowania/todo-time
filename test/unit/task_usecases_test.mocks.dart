// Mocks generated by Mockito 5.4.4 from annotations
// in task_time/test/unit/task_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_time/domain/entities/task_entity.dart' as _i5;
import 'package:task_time/domain/repositories/task_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamSubscription_0<E> extends _i1.SmartFake
    implements _i4.StreamSubscription<E> {
  _FakeStreamSubscription_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.TaskEntity>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i5.TaskEntity>>.value(<_i5.TaskEntity>[]),
      ) as _i4.Future<List<_i5.TaskEntity>>);

  @override
  _i4.Future<_i5.TaskEntity?> getTaskById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i4.Future<_i5.TaskEntity?>.value(),
      ) as _i4.Future<_i5.TaskEntity?>);

  @override
  _i4.Future<void> addTask(_i5.TaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTask(_i5.TaskEntity? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> toggleTaskStatus(String? id) => (super.noSuchMethod(
        Invocation.method(
          #toggleTaskStatus,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<_i5.TaskEntity>> watchTasks() => (super.noSuchMethod(
        Invocation.method(
          #watchTasks,
          [],
        ),
        returnValue: _i4.Stream<List<_i5.TaskEntity>>.empty(),
      ) as _i4.Stream<List<_i5.TaskEntity>>);
}
/*
NOTE: This is a simplified mock file. The actual generated file by build_runner
for Mockito might be more complex or slightly different based on the exact
version of Mockito and build_runner. This placeholder is to allow the project
to be analyzed without immediate build errors in a non-executing environment.
The `flutter pub run build_runner build --delete-conflicting-outputs` command
MUST be run in a real development environment for these tests to work.
*/
